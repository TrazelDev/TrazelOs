# this script should not run at all currently
# this script should not be ran manually
import os
import re

CPP_FILE_WITH_PROCESS_MAP_TEMPLATE = """{}

typedef struct
{{
    const char *name;
    void (*func)();
}} ProcessNameAndFunc;

ProcessNameAndFunc processesInSystem[] = 
{};
"""

def create_process_map_file_content(process_list : list) -> str:
    file_content = CPP_FILE_WITH_PROCESS_MAP_TEMPLATE.format(process_list, process_list)

    formatted_process    : str = str(process_list).replace("", "").replace("[", "{\n    { ").replace("]", "\n}").replace(".cpp", "").replace(",", ",\n    {")
    function_declaration : str = formatted_process.replace(" ", "").replace("}", "").removeprefix("{").replace("{", "extern void ").replace(",", "();").rstrip().replace("'", "") + "();\n"
    
    process_map          : str = formatted_process.replace("'", '"').rstrip().replace("\n}", ",\n}")
    process_map          : str = re.sub(r'{\s*"([^"]+)",', r'{ "\1", &\1}', process_map).rstrip().removesuffix("}").replace("}", "},") + "}"

    
    return CPP_FILE_WITH_PROCESS_MAP_TEMPLATE.format(function_declaration, process_map)

def create_processes_list(directory : str) -> list:
    processes = []
    for root, directories, filenames in os.walk(directory):
        for filename in filenames:
            processes.append(filename)
    return processes

def create_process_map_file(file_content : str, file_name : str):
    with open("src/processes/autoGeneratedFiles/processesMapArray.cpp", "w") as headerFile:
        headerFile.write(file_content)

def main():
    auto_generated_file_name = "src/processes/autoGeneratedFiles/processesMapArray.cpp"
    if os.path.exists(auto_generated_file_name):
        os.remove(auto_generated_file_name)

    file_list = create_processes_list('src/processes')
    file_content = create_process_map_file_content(file_list)
    create_process_map_file(file_content, auto_generated_file_name)

if __name__ == "__main__":
    main()